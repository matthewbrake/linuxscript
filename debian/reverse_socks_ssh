A SOCKS reverse SSH tunnel is a technique used to create a proxy server on a remote machine, allowing you to bypass network restrictions and access internal networks. Hereâ€™s a step-by-step guide on how to set it up:

### Step 1: Install SSH Server

Ensure that the SSH server is installed on the remote machine. If it's not already installed, you can do so by running:

```bash
sudo apt update
sudo apt install -y openssh-server
```

### Step 2: Generate SSH Key Pair (Optional)

While not strictly necessary, generating an SSH key pair can simplify the process by avoiding password prompts. You can generate a key pair using:

```bash
ssh-keygen -t rsa -b 4096
```

### Step 3: Create a SOCKS Proxy Server

To create a SOCKS proxy server, use the `-D` option with SSH. This option tells SSH to act as a SOCKS proxy server.

```bash
ssh -D 1080 user@remote_host
```

This command will create a SOCKS proxy server listening on port 1080 on your local machine.

### Step 4: Create a Reverse SSH Tunnel

To make the SOCKS proxy server accessible from another machine, you need to create a reverse SSH tunnel. This involves using the `-R` option with SSH to forward a port on the remote host to your local machine.

```bash
ssh -R 1080:localhost:1080 user@remote_host
```

This command will forward port 1080 on the remote host to your local machine, making it accessible via the reverse SSH tunnel.

### Step 5: Configure the Tunnel to Persist

To ensure the tunnel persists even if the connection drops, you can use `autossh` or configure systemd to restart the tunnel if it fails.

#### Using autossh:

```bash
autossh -M 0 -N -R 1080:localhost:1080 user@remote_host
```

#### Using systemd:

1. **Create a service file**:
   ```bash
   sudo tee /etc/systemd/system/autossh.service > /dev/null <<EOL
   [Unit]
   Description=Persistent Reverse SSH Tunnel
   After=network.target

   [Service]
   Type=simple
   ExecStart=/usr/bin/autossh -M 0 -N -R 1080:localhost:1080 user@remote_host
   Restart=always
   RestartSec=10

   [Install]
   WantedBy=multi-user.target
   EOL
   ```

2. **Enable and start the service**:
   ```bash
   sudo systemctl enable autossh.service 
   sudo systemctl start autossh.service 
   ```

### Step 6: Use the SOCKS Proxy

Once the tunnel is set up, you can use the SOCKS proxy by setting environment variables like `HTTP_PROXY`, `HTTPS_PROXY`, and `ALL_PROXY` to `socks5://localhost:1080`.

```bash
export HTTP_PROXY=socks5://localhost:1080 
export HTTPS_PROXY=socks5://localhost:1080 
export ALL_PROXY=socks5://localhost:1080 
```

This setup allows you to bypass network restrictions and access internal networks using a SOCKS reverse SSH tunnel[1][3][5].

Sources
[1] Offensive Security Guide to SSH Tunnels and Proxies https://posts.specterops.io/offensive-security-guide-to-ssh-tunnels-and-proxies-b525cbd4d4c6?gi=799daee49205
[2] Reverse SSH Tunneling: From Start to End - JFrog Connect https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/
[3] Reverse Tunneling with SSH | Jorgensen.org.uk https://www.jorgensen.org.uk/reverse-tunneling-with-ssh.html
[4] Setup Reverse SSH Tunnels | Holistics 2.0 Docs https://docs-v2.holistics.io/docs/tunnel-setup
[5] Create a reverse SSH tunnel for remote access to a restricted Linux machine https://dev.to/bulletmark/create-a-reverse-ssh-tunnel-for-remote-access-to-a-restricted-machine-1ma0
[6] Reverse SSH tunnel from popped box? - Tools - Hack The Box https://forum.hackthebox.com/t/reverse-ssh-tunnel-from-popped-box/2128
[7] Linux - AutoSSH | English https://docs.keeper.io/en/v/keeper-connection-manager/supported-protocols/persistent-reverse-ssh-tunnel/connecting-via-reverse-ssh-tunnel-1
[8] check and auto re establish reverse ssh tunnel https://stackoverflow.com/questions/52108101/check-and-auto-re-establish-reverse-ssh-tunnel
